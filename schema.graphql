scalar Time
type AuthToken {
  accessToken: String!
  expiredAt: Time!
}
type Auth {
  authToken: AuthToken!
  user: User!
}
type User {
  id: ID!
  username: String!
  email: String!
  first_name: String!
  last_name: String!
  meetups: [Meetup!]!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  body: String!
  user: User!
  replies: [Comment!]!
}

type Meetup {
  id: ID!
  name: String!
  description: String!
  user: User!
  comments: [Comment!]!
  categories: [Category!]!
}
type Category {
  id: ID!
  name: String!
  user: User!
  meetups: [Meetup!]!
}

input NewMeetup {
  name: String!
  description: String!
}
input RegisterInput {
  username: String!
  email: String!
  password: String!
  password_confirmation: String!
  first_name: String!
  last_name: String!
}
input MeetupFilter {
  name: String
}
input UpdateMeetup {
  name: String!
  description: String!
}
input UpdateCommentInput {
  body: String!
  parent_id: String
}
input LoginInput {
  email: String!
  password: String!
}
input CreateCommentInput {
  body: String!
  meetup_id: ID!
  parent_id: String
}
input CreateCategoryInput {
  name: String!
}
type Query {
  comments(meetup_id: ID!): [Comment!]!
  meetups(filter: MeetupFilter, limit: Int = 10, offset: Int = 0): [Meetup!]!
  user(id: ID!): User!
  categories(limit: Int = 10, offset: Int = 0): [Category!]!
  category(name: String!): Category!
}

type Mutation {
  createComment(input: CreateCommentInput!): Comment!
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Boolean!

  createCategory(input: CreateCategoryInput!): Category!
  updateCategory(name: String!, input: CreateCategoryInput): Category!
  deleteCategory(name: String!): Boolean!

  register(input: RegisterInput): Auth!
  login(input: LoginInput): Auth!

  createMeetup(input: NewMeetup!): Meetup!
  updateMeetup(id: ID!, input: UpdateMeetup!): Meetup!
  deleteMeetup(id: ID!): Boolean!
}
