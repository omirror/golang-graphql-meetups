// Code generated by github.com/vektah/dataloaden, DO NOT EDIT.

package loaders

import (
    "sync"
    "time"

    "github.com/secmohammed/meetups/models"
)

// MembersLoaderConfig captures the config to create a new MembersLoader
type MembersLoaderConfig struct {
    // Fetch is a method that provides the data for the loader
    Fetch func(keys []string) ([][]*models.UserGroup, []error)

    // Wait is how long wait before sending a batch
    Wait time.Duration

    // MaxBatch will limit the maximum number of keys to send in one batch, 0 = not limit
    MaxBatch int
}

// NewMembersLoader creates a new MembersLoader given a fetch, wait, and maxBatch
func NewMembersLoader(config MembersLoaderConfig) *MembersLoader {
    return &MembersLoader{
        fetch:    config.Fetch,
        wait:     config.Wait,
        maxBatch: config.MaxBatch,
    }
}

// MembersLoader batches and caches requests
type MembersLoader struct {
    // this method provides the data for the loader
    fetch func(keys []string) ([][]*models.UserGroup, []error)

    // how long to done before sending a batch
    wait time.Duration

    // this will limit the maximum number of keys to send in one batch, 0 = no limit
    maxBatch int

    // stringERNAL

    // lazily created cache
    cache map[string][]*models.UserGroup

    // the current batch. keys will continue to be collected until timeout is hit,
    // then everything will be sent to the fetch method and out to the listeners
    batch *MembersLoaderBatch

    // mutex to prevent races
    mu sync.Mutex
}

type MembersLoaderBatch struct {
    keys    []string
    data    [][]*models.UserGroup
    error   []error
    closing bool
    done    chan struct{}
}

// Load a UserGroup by key, batching and caching will be applied automatically
func (l *MembersLoader) Load(key string) ([]*models.UserGroup, error) {
    return l.LoadThunk(key)()
}

// LoadThunk returns a function that when called will block waiting for a UserGroup.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *MembersLoader) LoadThunk(key string) func() ([]*models.UserGroup, error) {
    l.mu.Lock()
    if it, ok := l.cache[key]; ok {
        l.mu.Unlock()
        return func() ([]*models.UserGroup, error) {
            return it, nil
        }
    }
    if l.batch == nil {
        l.batch = &MembersLoaderBatch{done: make(chan struct{})}
    }
    batch := l.batch
    pos := batch.keyIndex(l, key)
    l.mu.Unlock()

    return func() ([]*models.UserGroup, error) {
        <-batch.done

        var data []*models.UserGroup
        if pos < len(batch.data) {
            data = batch.data[pos]
        }

        var err error
        // its convenient to be able to return a single error for everything
        if len(batch.error) == 1 {
            err = batch.error[0]
        } else if batch.error != nil {
            err = batch.error[pos]
        }

        if err == nil {
            l.mu.Lock()
            l.unsafeSet(key, data)
            l.mu.Unlock()
        }

        return data, err
    }
}

// LoadAll fetches many keys at once. It will be broken stringo appropriate sized
// sub batches depending on how the loader is configured
func (l *MembersLoader) LoadAll(keys []string) ([][]*models.UserGroup, []error) {
    results := make([]func() ([]*models.UserGroup, error), len(keys))

    for i, key := range keys {
        results[i] = l.LoadThunk(key)
    }

    users := make([][]*models.UserGroup, len(keys))
    errors := make([]error, len(keys))
    for i, thunk := range results {
        users[i], errors[i] = thunk()
    }
    return users, errors
}

// LoadAllThunk returns a function that when called will block waiting for a UserGroups.
// This method should be used if you want one goroutine to make requests to many
// different data loaders without blocking until the thunk is called.
func (l *MembersLoader) LoadAllThunk(keys []string) func() ([][]*models.UserGroup, []error) {
    results := make([]func() ([]*models.UserGroup, error), len(keys))
    for i, key := range keys {
        results[i] = l.LoadThunk(key)
    }
    return func() ([][]*models.UserGroup, []error) {
        users := make([][]*models.UserGroup, len(keys))
        errors := make([]error, len(keys))
        for i, thunk := range results {
            users[i], errors[i] = thunk()
        }
        return users, errors
    }
}

// Prime the cache with the provided key and value. If the key already exists, no change is made
// and false is returned.
// (To forcefully prime the cache, clear the key first with loader.clear(key).prime(key, value).)
func (l *MembersLoader) Prime(key string, value []*models.UserGroup) bool {
    l.mu.Lock()
    var found bool
    if _, found = l.cache[key]; !found {
        // make a copy when writing to the cache, its easy to pass a postringer in from a loop var
        // and end up with the whole cache postringing to the same value.
        cpy := make([]*models.UserGroup, len(value))
        copy(cpy, value)
        l.unsafeSet(key, cpy)
    }
    l.mu.Unlock()
    return !found
}

// Clear the value at key from the cache, if it exists
func (l *MembersLoader) Clear(key string) {
    l.mu.Lock()
    delete(l.cache, key)
    l.mu.Unlock()
}

func (l *MembersLoader) unsafeSet(key string, value []*models.UserGroup) {
    if l.cache == nil {
        l.cache = map[string][]*models.UserGroup{}
    }
    l.cache[key] = value
}

// keyIndex will return the location of the key in the batch, if its not found
// it will add the key to the batch
func (b *MembersLoaderBatch) keyIndex(l *MembersLoader, key string) int {
    for i, existingKey := range b.keys {
        if key == existingKey {
            return i
        }
    }

    pos := len(b.keys)
    b.keys = append(b.keys, key)
    if pos == 0 {
        go b.startTimer(l)
    }

    if l.maxBatch != 0 && pos >= l.maxBatch-1 {
        if !b.closing {
            b.closing = true
            l.batch = nil
            go b.end(l)
        }
    }

    return pos
}

func (b *MembersLoaderBatch) startTimer(l *MembersLoader) {
    time.Sleep(l.wait)
    l.mu.Lock()

    // we must have hit a batch limit and are already finalizing this batch
    if b.closing {
        l.mu.Unlock()
        return
    }

    l.batch = nil
    l.mu.Unlock()

    b.end(l)
}

func (b *MembersLoaderBatch) end(l *MembersLoader) {
    b.data, b.error = l.fetch(b.keys)
    close(b.done)
}
