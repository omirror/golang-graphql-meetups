scalar Time
scalar Upload
enum AttendanceStatus {
  going
  interested
}
directive @authentication(auth: Authentication!) on FIELD_DEFINITION
enum Authentication {
  GUEST
  AUTHENTICATED
}
type UserGroup {
  user: User!
  type: String!
}
type Group {
  id: ID!
  name: String!
  description: String!
  user: User!
  categories: [Category!]!
  members: [UserGroup!]!
  meetups: [Meetup!]!
}
input CreateConversationInput {
  user_ids: [ID!]!
  message: String!
}
type Conversation {
  id: ID!
  message: String!
  user: User!
  last_reply: String!
  created_at: String!
  updated_at: String!
  conversations: [Conversation!]!
}
type AuthToken {
  accessToken: String!
  expiredAt: Time!
}
type Auth {
  authToken: AuthToken!
  user: User!
}
type User {
  id: ID!
  username: String!
  email: String!
  first_name: String!
  last_name: String!
  avatar: String!
  meetups: [Meetup!]!
  interests: [Category!]!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  body: String!
  user: User!
  replies: [Comment!]!
}

type Meetup {
  id: ID!
  name: String!
  description: String!
  user: User!
  comments: [Comment!]!
  categories: [Category!]!
  attendees: [Attendee!]!
}
type Category {
  id: ID!
  name: String!
  user: User!
  meetups: [Meetup!]!
}
type Attendee {
  id: ID!
  status: String!
  user: User!
  meetup: Meetup!
}

input CreateMeetupInput {
  name: String!
  start_date: String!
  end_date: String!
  description: String!
  group_id: String
}
input CreateGroupInput {
  name: String!
  description: String!
  category_ids: [ID!]!
}
input UpdateGroupInput {
  name: String!
  description: String!
  category_ids: [ID!]
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  password_confirmation: String!
  first_name: String!
  last_name: String!
  avatar: Upload
}
input MeetupFilterInput {
  name: String
  start_date: String
  end_date: String
  location: String
}
input UpdateMeetupInput {
  name: String!
  start_date: String!
  end_date: String!
  description: String!
}
input UpdateCommentInput {
  body: String!
}
input LoginInput {
  email: String!
  password: String!
}
input CreateCommentInput {
  body: String!
  meetup_id: ID!
  parent_id: String
}
input CreateCategoryInput {
  name: String!
}
input CreateAttendanceInput {
  status: AttendanceStatus!
  meetup_id: ID!
}
type Query {
  comments(meetup_id: ID!): [Comment!]!

  groups: [Group!]!
  group(id: ID!): Group!

  meetups(
    filter: MeetupFilterInput
    limit: Int = 10
    offset: Int = 0
  ): [Meetup!]!

  filteredMeetupsForUser(
    filter: MeetupFilterInput
    limit: Int = 10
    offset: Int = 0
  ): [Meetup!]!

  meetup(id: ID!): Meetup!

  authenticatedUser: User! @authentication(auth: AUTHENTICATED)
  user(id: ID!): User!

  conversation(id: ID!): Conversation!
  conversations: [Conversation!]!

  categories(limit: Int = 10, offset: Int = 0): [Category!]!
  category(name: String!): Category!
}
type Mutation {
  shareMeetupToGroup(meetup_id: ID!, group_id: ID!): Boolean! @authentication(auth: AUTHENTICATED)
  deleteMeetupFromGroup(meetup_id: ID!, group_id: ID!): Boolean! @authentication(auth: AUTHENTICATED)

  createGroup(input: CreateGroupInput!): Group! @authentication(auth: AUTHENTICATED)
  deleteGroup(id: ID!): Boolean! @authentication(auth: AUTHENTICATED)

  updateGroup(id: ID!, input: UpdateGroupInput!): Group! @authentication(auth: AUTHENTICATED)
  # we need to make sure that user who does that is actually an admin.
  assignMemberToGroup(id: ID!, userID: ID!, role: String = "member"): Group! @authentication(auth: AUTHENTICATED)
  createAttendance(input: CreateAttendanceInput!): Attendee!
    @authentication(auth: AUTHENTICATED)
  updateAttendance(id: ID!, status: AttendanceStatus!): Attendee!
    @authentication(auth: AUTHENTICATED)
  deleteAttendance(id: ID!): Boolean! @authentication(auth: AUTHENTICATED)

  createInterest(category_id: ID!): Boolean!
    @authentication(auth: AUTHENTICATED)
  deleteInterest(category_id: ID!): Boolean!
    @authentication(auth: AUTHENTICATED)

  createComment(input: CreateCommentInput!): Comment!
    @authentication(auth: AUTHENTICATED)
  updateComment(id: ID!, input: UpdateCommentInput!): Comment!
    @authentication(auth: AUTHENTICATED)
  deleteComment(id: ID!): Boolean! @authentication(auth: AUTHENTICATED)

  createCategory(input: CreateCategoryInput!): Category!
    @authentication(auth: AUTHENTICATED)
  updateCategory(name: String!, input: CreateCategoryInput): Category!
    @authentication(auth: AUTHENTICATED)
  deleteCategory(name: String!): Boolean! @authentication(auth: AUTHENTICATED)

  register(input: RegisterInput): Auth! @authentication(auth: GUEST)
  login(input: LoginInput): Auth! @authentication(auth: GUEST)

  createMeetup(input: CreateMeetupInput!): Meetup!
    @authentication(auth: AUTHENTICATED)
  updateMeetup(id: ID!, input: UpdateMeetupInput!): Meetup!
    @authentication(auth: AUTHENTICATED)
  deleteMeetup(id: ID!): Boolean! @authentication(auth: AUTHENTICATED)

  createMessage(
    conversation_id: ID!
    input: CreateMessageInput!
  ): Conversation! @authentication(auth: AUTHENTICATED)
  createConversation(input: CreateConversationInput!): Conversation!
    @authentication(auth: AUTHENTICATED)
}
input CreateMessageInput {
  message: String!
}
type Subscription {
  messageAdded: Conversation! @authentication(auth: AUTHENTICATED)
}
